---

title: madyote.com

listen: >-
  (c,key,msg) => {
    if (key === 'pageMode') {
      c.fun.pageMode( msg );
    } else if (key === 'loaded-app') {
      c.set( 'app', msg );
    } else if (key === 'got-login') {
      c.set( 'acct', msg );
      c.set( 'message', 'logged in' );
      c.fun.pageMode( 'default' );
    } else if (key === 'close-account-options') {
      c.fun.pageMode( 'default' );
    }
  }
  
functions:

  formFields: >-
    (c,form) => {
      return Object.fromEntries(new FormData( form ).entries());
    }

  pageMode: >-
    (c,mode) => {
      if ( c.get( 'pageMode' ) !== mode ) {
        history.pushState( { pageMode: mode }, undefined, mode === 'default' ? '/i2.html' : `?pageMode=${mode}` );
        c.set( 'pageMode', mode );
        c.top.refresh();
      }
    }
  logout: >-
    c => {
      yote.logout();
      c.top.set( 'acct' );
      c.fun.pageMode( 'default' );
      c.top.set( 'message', 'logged out' );
      c.top.refresh();
    }
    
    
onLoad: >-
  c => {
    // listen to page change event
    addEventListener( 'popstate', ev => {
      c.set( 'pageMode', ( ev.state && ev.state.pageMode || 'default' ) );
      c.top.refresh();
    } );

    document.addEventListener( 'click', (ev) => {
      c.broadcast( 'document-click', ev );
    } );

    document.addEventListener( 'keyup', (ev) => {
       if (ev.key === 'Escape') { 
          c.broadcast( 'document-escape', ev );
      } 
    } );


    yote.fetchAppTryLogin( c.get( 'appName' ) )
      .then( app => {
        if (app) {
          c.broadcast( 'loaded-app', app );
          if (app.acct) {
            c.broadcast( 'got-login', app.acct );
          }
        }
      });
      
      // connect the widgets together
      //c.comp.header.fun.attach( c.comp.loginBodyWidget );
      // try to look at the url. maybe it wants login?
      const usp = new URLSearchParams( window.location.search );
      for (const [key, value] of usp) {
         if (key === 'pageMode') {
           c.set( 'pageMode', value );
         }
      }
  }
  
data:
  appName: test
  pageMode: default
  app: false
  acct: false
  is_admin: false
  showing_acct_menu: false
  in_edit: false

body:
  class: site
  contents:
    - siteheader:
        on_show_login: c => c.fun.pageMode( 'logging-in' )
        on_show_account_menu: c => c.set( 'showing_acct_menu', true )

    - clickMenu:
        if: c => c.get( 'showing_acct_menu' )
        on_close_click_menu: c => c.set( 'showing_acct_menu' )
        data:
          options:
            - label: edit account
              action: c => c => c.fun.pageMode( 'account-settings' )
            - label: log out
              action: c => c => c.fun.logout()
    - main:
        - message:

        - login:
            if: c => c.get( 'pageMode' ) === 'logging-in'
            on_submit: (c, req) => { console.log(req); debugger; }
        - centerBox:
            elseif: c => c.get( 'pageMode' ) === 'account-settings'
            contents:
              - accountSetupForm:
        - centerBox:
            elseif: c => c.get( 'app' )
            contents:
              - div: got app can do stuff
        - div:
            else: true
            contents:
              - div: no app, waiting on stuff

    - sitefooter:

recipes:

  message:
    class: row space
    contents:
      - div:
          - div:
              class: message space
              if: c => c.get('message')
              on_click: c => c.top.set('message')
              contents:
                - span: c => c.get('message')
                - span: x

  centerBox:
    - div:
        style: margin: 0 auto;
        contents:
          - div:
              fill: true

  clickOption:
    - div:
        class: click-option
        textContent: c => c.get('label')
        on_click: >-
          (c,ev) => { 
          const action = c.get('action');
            if (action) {
              action(c,ev);
            }
            c.fun.close_click_menu();
          }

  clickMenu:
    functions:
      close_click_menu: c => c.event( 'close_click_menu' )
    listen: >-
      (c,key,msg) => {
        if( key === 'document-click' ) {
           c.fun.close_click_menu()
        }
      }
    contents:
      - div: 
          class: click-menu
          style: c => `right: ${(c.el.accountButton && c.el.accountButton.height) || 0}px`
          on_click: (c,ev) => { ev.stopPropagation(); ev.preventDefault(); }
          contents:
            - clickOption:
                forval: opt
                foreach: c => c.get( 'options' ) || []
                data:
                  label: c => c.it.opt.label
                  action: c => c.it.opt.action(c)

  errorBox:
    - div:
        class: col
        contents:
          - div:
              innerContent: true

  sitefooter:
    contents:
      - footer:
          class: site-footer

  siteheader:
    contents:
      - header:
          class: site-header
          contents:
            - span: logo
            - button:
                if: c => c.get('app') && ! c.get( 'acct' )
                textContent: log in
                on_click: c => c.event( 'show_login' )
                on_clicku: c => c.get('app').login({ login: 'coyo', password: 'bigshoe' }).then(acct => {c.broadcast( 'got-login', acct ) })
            - button:
                elseif: c => c.get('app')
                textContent: Account
                handle: accountButton
                on_click: >-
                  (c,ev) => {
                    ev.stopPropagation();
                    ev.preventDefault();
                    c.event( 'show_account_menu' );
                    //c.set( 'menuButton', c.el.accountButton );
                    //c.event( 'show_account_options' );
                  }

  login:
    class: center-main
    contents:
      - main:
          - loginForm:

  loginForm:

    functions:
      login: >-
        (c,login,password) => {
          c.get('app')
            .login( { login, password } )
            .then( acct => { c.fun.clear();
                             c.broadcast( 'got-login', acct );
                           })
            .catch( err => { c.set( 'err', err ); c.refresh() } );
        }
      clear: >-
        c => {
          c.broadcast( 'err' ); //clear the error
          [ 'login', 'password' ]
             .forEach( n => c.el.form[n].value = '' );
        }

    class: login-form

    contents:
      - form:
          handle: form
          on_submit: >-
            (c,ev) => { 
              ev.preventDefault(); 
              const form = ev.target;
              c.fun.login( form.login.value, form.password.value );
            }
          contents:
            - div:
                - h1: login
                - input:
                    name: login
                    type: text
                    placeholder: email or account name
                    required: true
                - input:
                    name: password
                    handle: password
                    type: password
                    placeholder: password
                    required: true
                - button:
                    type: submit
                    textContent: Log In
                - a:
                    href: '#'
                    on_click: >-
                      (c,ev) => { 
                        ev.preventDefault();
                        c.parent.set('mode', 'show-create-account');
                      }
                    textContent: 'create account'

  accountSetupForm:
    class: account-setup-form
    contents:
      - form:
          contents:
            - h1: setup account

less: >-
  .site {
    margin: 0;
    background: #EED;
    > main {
      min-width: 600px;
      margin: 0 auto;
      display: flex;
      flex-direction: column;
      justify-content: space-around;
    }
  }
  .center-main {
    text-align: center;
  }
  .site-header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    background-color: wheat;
    padding: 4px;
  }

  .message {
    cursor: pointer;
    border: solid 3px red;
    span {
      padding: 0 10px;
    }
  }

  .login-form {
    border: solid 1px skyblue;
    background: #FFE;
    padding: 1em;
    display: inline-block;
    > div {
        display: flex;
        flex-direction: column;
        & > div {
            margin: 0 auto;
        } 
        form {
            border: solid black;
            & > * {
                margin: 0 auto;
                padding: 3px;
            }
        }
    }
  }
  .col {
    display: flex;
    flex-direction: column;
  }
  .space {
    justify-content: space-around;
  }
  .row {
    display: flex;
    flex-direction: row;
  }
  .center {
    justify-content: center;
  }
  .center-box > div {
    display: inline-block;
  }
  .click-option {
    cursor: pointer;
  }
  .click-menu {
    position: absolute;
    top: 36px;
    right: 3px;
    border: solid 1px black;
    background: white;
    padding: 3px;
  }
  
