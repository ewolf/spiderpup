---

#
# lets test listeners
#
data:
  heard: {}
  broadcast_count: 0

functions:
  inc: >-
    (s,n) => {
       s.namespace.data.heard[n] = 1 + (s.namespace.data.heard[n] || 0);
       return n;
    }

page:
  title: listener test
 
  body:
    listen: (s,x,y) => { s.namespace.data.broadcast_count++; return s.namespace.fun.inc( `body '${x}'` ) }
    contents:
      - div: s => `${s.namespace.data.broadcast_count} broadcast(s)`
      - knock:
      - knock:
          - pock:

recipes:
  pock:
    listen: (s,x,y) => s.namespace.fun.inc( `pock '${x}'` )
    contents:
      - span:
  knock:
    listen: (s,x,y) => s.namespace.fun.inc( `knock '${x}'` )
    contents:
      - div:

test: >-
  const tester = SP.tester;
  tester.html_structure( document.body, 
                  [ 'body', { 'data-inst-id': '17' }, 
                      ['div', '0 broadcast(s)' ],
                      ['div', { 'data-inst-id': '18' } ], 
                      ['div', { 'data-inst-id': '19' }, ['span', { 'data-inst-id': '21' } ] ],
                  ],
                  'body structure' );

  const inst = SP.bodyInstance;
  const NS = inst.namespace;

  tester.is_deeply( NS.data.heard, {}, 'empty heard hash' );

  inst.broadcast( "FIRST" );

  tester.doneTesting();
  
  
    
