---

title: madyote.com

import:
  logins: yote_test/logins

data:
  appName: test
  pageMode: default

onLoad: >-
  c => {
    yote.fetchAppTryLogin( c.get( 'appName' ) )
      .then( app => {
          if (app) {
            c.broadcast( 'app', app );
            if (app.acct) {
               c.broadcast( 'login', app.acct );
            }
          }
      } );
  }

listen: >-
  (c,msg,data) => {
    switch( msg ) {
      case "login":
        c.set( msg, data );
        c.fun.pageMode( 'default' );
        break;
      case "app":
        c.set( msg, data );
        break;
      case "pageMode":
        // maybe navigate to a new url
        // catch that and have that in the history?
        // so there is no reload
        c.fun.pageMode( data );
        //c.set( msg, data );
        break;
      case "logout":
        c.set( 'login', undefined );
        c.fun.pageMode( 'default' );
        break;
    }
  }

  
body:
  - logins.siteHeader:
  - section:
      - h1: MADYOTE
      - p: >-
          well, what do i want to say here? Stuff I want to do.

      - outline:
          data:
            title: Yote Components
            items:
              - server
              - spiderpup
              - objectstore
              - recordstore

      - outline:
          data:
            title: Yote Apps
            items:
              - spuc
              - GRU

      - outline:
          data:
            title: ToDo Items
            items:
              - translate 500s into more clear text. certainly go for the log, go to the page at least for development
              - try to adhere to a feature freeze for spiderpup and yote. see what can be accomplished with it as is. include a wishlist for future features
              - make madyote.com its own repo / place this file and others in it
              - component styles. come up with rules of thumb
              - make login page for this. 
              - make CLI account tools
              - make CLI setup and configuration tool
              - put the todo, components, etc in the store and have this fetch from the store.
              - spiderpup example page where you can practice spiderpup
              - write learn yote by example
              

            

components:
  outline:
    data:
      title: untitled
      items: [ 1, 2, 3 ]
    contents:
      - section:
          - div:
              - span: c => c.get('title')
              - ul:
                  - li:
                      foreach: c => c.get('items')
                      forval: item
                      contents:
                        - a:
                            if: c => Array.isArray(c.it.item)
                            href: c => c.it.item[1]
                            textContent: c => c.it.item[0]
                        - span:
                            textContent: c => c.it.item
                            else:
