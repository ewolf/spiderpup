---

import:

css: >-
  @keyframes blinker {
    50% {
      border: solid 3px green;
      opacity: 0;
    }
  }
  

less: >-
  .loading {
    color: blue;
    animation: blinker 4s linear infinite;
  }

  .counter {
    border: solid 3px brown;
    margin: 12px;
    padding: 5px;
    span {
      margin: 0 10px;
    }
  }
  body {
    .button {
       border: solid 1px black;
       cursor: pointer;
    }
    margin: 0;
    header {
       background-color: pink;

       height: 2em;
       top: 0;
       width: 100%;
       position: fixed;

       > div {
        padding: 4px;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
       }
    }
    .login-widget {
        ul {
            position: absolute;
            right: 4px;
            padding: 10px;
            border: solid blue 3px;
            margin: 0;
            background-color: #dfd;
        }
        li {
            list-style-type: none;
            cursor: pointer;
        }
        li:hover {
            background-color: #aca;
        }
        li.divider {
            height: 1px;
            margin: 0.25rem 0;
            padding: 0;
            background-color: #dbdbdb;
        }
    }
    .demo {
      display: flex;
      flex-direction: row;
      border: solid 2px black;
      form {
        padding: 2px;
        margin: 0 3px;
        border: solid 2px black;
        display: flex;
        flex-direction: column;
      }
    }
    main {
       margin-top: 2em;
       display: flex;
       > div {
          margin: 0 auto;
       }
       form {
         margin-block-end: 0;
         a {
           text-align: center;
         }
       }
    }
  }

javascript: >-
  function does() { console.log('hoeet') }
  const stilldoes = () => console.log( 'still' );
  console.log('loaded javascript');

functions:
  pageMode: >-
    (c,mode) => {
      if ( c.get( 'pageMode' ) !== mode ) {
        history.pushState( { pageMode: mode }, undefined, mode === 'default' ? '/yote_test/hello.html' : `?pageMode=${mode}` );
        c.set( 'pageMode', mode );
      }
    }
  greetings: (body,ev) => alert( `hello there from ${ev.target}` )

data:
  appName: test
  pageMode: default

onLoad: >-
  c => {
    // set up the listener
    addEventListener( 'popstate', ev => {
      c.set( 'pageMode', ( ev.state && ev.state.pageMode || 'default' ) );
      c.refresh();
    } );

    does();
    stilldoes();
    yote.fetchAppTryLogin( c.get( 'appName' ) )
      .then( app => {
        if (app) {
          c.broadcast( 'app', app );
          if (app.acct) {
            c.broadcast( 'login', app.acct );
          }
        }
      });
      
      // try to look at the url. maybe it wants login?
      const usp = new URLSearchParams( window.location.search );
      for (const [key, value] of usp) {
         if (key === 'pageMode') {
           c.set( 'pageMode', value );
         }
      }
  }

listen: >-
  (c,msg,data) => {
    switch( msg ) {
      case "login":
        c.set( msg, data );
        c.fun.pageMode( 'default' );
        break;
      case "app":
        c.set( msg, data );
        break;
      case "pageMode":
        // maybe navigate to a new url
        // catch that and have that in the history?
        // so there is no reload
        c.fun.pageMode( data );
        //c.set( msg, data );
        break;
      case "logout":
        console.log( c.id, 'logout' );
        c.set( 'login', undefined );
        c.fun.pageMode( 'default' );
        break;
    }
  }

title: fun example

body:
  on_keyup: (c,ev) => { if (ev.key === 'Escape') { c.broadcast( 'keyup', 'Escape'); c.broadcast( 'pageMode', 'default' ); } }
  contents:
    - header:
    - main:
        - div:
            - h1: c => c.get( 'pageMode' )

            - loginControl:
                if: c => c.get( 'pageMode' ) === 'login-control'
            - div:
                if: c => c.get( 'login' ) && c.get( 'pageMode' ) !== 'login-control'
                textContent: logged in stuff
            - div:
                if: c => c.get( 'app' ) && c.get( 'pageMode' ) !== 'login-control'
                contents:
                  - div:
                      - form:
                          on_submit: >-
                            (c,ev) => { ev.preventDefault();
                               yote.apps.test.echo( c.el.something.value )
                                 .then( r => alert( 'hello world ' + r ) ); }
                          contents:
                            - input:
                                placeholder: say something
                                handle: something
                                required: true
                            - button: click me
                      - counter:
                          data:
                            title: counter 1
                      - counter:
                          data:
                            clicks: 12
                      - button:
                          type: button
                          on_click: (body,ev) => body.fun.greetings(ev)
                          textContent: click me
                          style: font-weight: bold;
                  - hr:
                  - demo:
            - div:
                if: c => ! c.get('app')
                textContent: app not yet loaded

components:
  header:
    - header:
        - div:
          - div:
              textContent: LOGO
              class: button
              on_click: (c,e) => c.broadcast( 'pageMode', 'default' )
          - loginWidget:

  loginWidget:
    functions:
      logout_done: >-
        c => {
          c.set('show-menu',undefined);
          c.broadcast( 'logout' );
        }
      logout: >-
        c => yote.logout( c.get('appName') )
             .then( msg => c.fun.logout_done() )
             .catch( err => c.fun.logout_done() )
    listen: >-
      (c,key,msg) => {
        if ((key === 'keyup' && msg === 'Escape') || key === 'body-click' ) {
          c.set( 'show-menu', false );
        }
      }
    contents:
      - div:
          class: login-widget
          contents:
            - div:
                # logged in / logout
                if: c => c.get( 'login' )
                contents:
                  - button:
                      type: button
                      on_click: >-
                         (c,e) => {
                           const show = !!!c.get('show-menu');
                           c.set( 'show-menu', show );
                           if (show) {
                           
                           }
                         }
                      contents:
                        - span:
                            innerHTML: () => 'avatar &#8964';
            - div:
                # button to open login / create thingo
                elseif: c => c.get( 'app' )
                contents:
                  - button:
                      type: button
                      textContent: log in
                      # maybee catch the pageMode change?
                      on_click: (c,e) => c.broadcast( 'pageMode', 'login-control' )
            - ul:
                handle: menu
                if: c => c.get( 'show-menu' )
                contents:
                  - li: identity
                  - li: 
                      class: divider
                  - li: set status
                  - li: edit profile
                  - li:
                      class: divider
                  - li:
                      textContent: log out
                      on_click: c => c.fun.logout()

  loginControl:
    functions:

      checkLogin: >
        (c,ev) => {
          if (!c.el.login.value) {
             c.el.login.style['background-color'] = 'pink';
          } else {
             delete c.el.login.style['background-color'];
             // c.el.login.style['background-color'] = 'green';
          }
          if (!c.el.loginPassword.value) {
             c.el.loginPassword.style['background-color'] = 'pink';
          } else {
             delete c.el.loginPassword.style['background-color'];
             // c.el.password.style['background-color'] = 'green';
          }
        }

      checkCreate: >
        (c,ev) => {
          if (!c.el.handle.value) {
             c.el.handle.style['background-color'] = 'pink';
          } else {
             delete c.el.handle.style['background-color'];
             // c.el.handle.style['background-color'] = 'green';
          }
          if (!c.el.email.value) {
             c.el.email.style['background-color'] = 'pink';
          } else {
             delete c.el.email.style['background-color'];
             // c.el.email.style['background-color'] = 'green';
          }
          if (!c.el.password.value) {
             c.el.password.style['background-color'] = 'pink';
          } else {
             delete c.el.password.style['background-color'];
             // c.el.password.style['background-color'] = 'green';
          }
        }

      clear: >-
        c => {
          c.set( 'err' );
          ['login','loginPassword','email','login','password']
            .forEach( ctl => c.el[ctl] && (c.el[ctl].value = '' ) );
        }

      login: >-
        (c,login,password) => {
          c.get('app')
            .login( { login, password } )
            .then( acct => { c.fun.clear();
                             c.broadcast( 'login', acct );
                           })
            .catch( err => { c.set( 'err', err ); c.refresh() } );
        }
      createAccount: >-
        (c,handle,email,password) => {
          c.get('app')
            .create_account( { handle, email, password } )
                     .then( acct => { c.fun.clear();
                                      c.broadcast( 'login', acct );
                                     } )
           .catch( err => { c.set( 'err', err ); c.refresh() } )
        }

    listen: >-
      (c,key,msg) => {
        if (key === 'keyup' && msg === 'Escape' ) {
          c.set( 'mode', 'login' );
          c.fun.clear();
        }
      }

    contents:
      - section:
          style: display: inline-block; border: solid 3px black; padding: .5em;
          contents:
            - div:
                # create account
                if: c => c.get( 'mode' ) === 'show-create-account'
                contents:
                  - form:
                      on_submit: >-
                        (c,ev) => { ev.preventDefault();
                           c.fun.createAccount( c.el.handle.value,
                                                c.el.email.value,
                                                c.el.password.value ) }
                      contents:
                        - div:
                            style: display:flex; flex-direction: column
                            contents:
                              - input:
                                  handle: handle
                                  placeholder: handle
                                  type: text
                                  style: margin: 3px auto
                                  required: true
                                  on_keyup: (c,ev) => c.fun.checkCreate(ev)
                              - input:
                                  handle: email
                                  placeholder: email
                                  type: text
                                  style: margin: 3px auto
                                  required: true
                                  on_keyup: (c,ev) => c.fun.checkCreate(ev)
                              - input:
                                  handle: password
                                  style: margin: 3px auto
                                  type: password
                                  placeholder: password
                                  required: true
                                  on_keyup: (c,ev) => c.fun.checkCreate(ev)
                              - button:
                                  style: margin: 3px auto
                                  type: submit
                                  textContent: Create Account
            - div:
                # login
                else:
                contents:
                  - form:
                      on_submit: >-
                       (c,ev) => { 
                         ev.preventDefault(); 
                         c.fun.login( c.el.login.value, c.el.loginPassword.value )
                       }
                      contents:
                        - div:
                            style: display:flex; flex-direction: column
                            contents:
                              - input:
                                  handle: login
                                  placeholder: login or email
                                  type: text
                                  style: margin: 3px auto
                                  required: true
                                  on_keyup: (c,ev) => c.fun.checkLogin(ev)
                              - input:
                                  handle: loginPassword
                                  style: margin: 3px auto
                                  type: password
                                  placeholder: password
                                  required: true
                                  on_keyup: (c,ev) => c.fun.checkLogin(ev)
                              - button:
                                  style: margin: 3px auto
                                  type: submit
                                  textContent: Log In
                              - a:
                                  href: '#'
                                  on_click: (c,ev) => { ev.preventDefault(); c.set('mode', 'show-create-account'); c.fun.clear() }
                                  textContent: 'create account'
            - div:
                # error
                if: c => c.get( 'err' )
                style: background-color: pink; border: solid 1px; padding: 2px;
                textContent: c => c.get( 'err' )
  counter:
    data:
      clicks: 0
      title: no title set
    functions:
      inc: c => c.set( 'clicks', 1 + c.get( 'clicks' ) )
      dec: c => c.set( 'clicks', c.get( 'clicks' ) -1 )
    contents:
      - div:
          class: counter
          contents:
            - h2: c => c.get( 'title' )
            - div:
                - button:
                    textContent: '<'
                    on_click: c => c.fun.dec()
                - span: c => `${c.get('clicks')} clicks`
                - button:
                    textContent: '>'
                    on_click: c => c.fun.inc()
  demo:
    data:
      yamlText: ''
      loaded: false
    onLoad: >-
      c => {
        yote.apps.test.fetch_yaml()
           .then( txt => {
              c.set( 'yamlText', txt );
              c.set( 'loaded', true );
          } );
      }
    contents:
      - div:
          class: demo
          contents:
            - form:
                if: c => c.get( 'loaded' ) 
                on_submit: >-
                  (c,ev) => {
                    ev.preventDefault();
                    c.set( 'loaded', false );
                    alert(c.el.yaml.value);
                    yote.apps.test.install_yaml(c.el.yaml.value)
                      .then( r => { 
                         c.set( 'loaded', true );
                         c.refresh();
                      } )
                  }
                contents:
                  - h3: Spiderpup Yaml
                  - textarea:
                      handle: yaml
                      textContent: c => c.get( 'yamlText' )
                      on_keyup: (c,ev) => c.set( 'yamlText', ev.target.value )
                  - button: generate output
            - div:
                if: c => c.get( 'loaded' ) 
                contents:
                  - h3: Yaml output
                  - iframe:
                      src: /yote_test/test.html
            - div:
                class: loading
                else:
                textContent: loading
