---

html:
  head:
    title: yote test
  body:
    listen: >-
      (c,msg,data) => {
        if (msg === 'login') {
           c.data.set( 'login', data );
        }
        else if (msg === 'logout') {
           c.data.set( 'login', undefined );
        }
        else if (msg === 'app') {
           c.data.set( 'app', data );
        }
      }
    contents:
      - h1: yote test
      - div: hi there
      - loginControl:
          handle: loginControl
          data:
            appName: test
      - div:
          if: c => c.data.get( 'login' )
          textContent: logged in stuff
      - div:
          elseif: c => c.data.get( 'app' )
          content:
            - form:
                on_submit: (c,ev) => { ev.preventDefault(); yote.apps.test.echo( c.el.something.value ).then( r => alert( 'hello world ' + r ) ); }
              contents:
                - input:
                    placeholder: say something
                    handle: something
                    required: true
                - button: click me
      - div:
          else:
          textContent: app not yet loaded
      

components:
  loginControl:
    onLoad: >-
      c => { 
        yote.fetchAppTryLogin( c.data.get( 'appName' ) )
          .then( app => {
             if (app) {
               c.broadcast( 'app', app );
               if (app.acct) {
                 c.broadcast( 'login', app.acct );
               }
             }
          }) }
    functions:
      app: c => c.data.get( 'app' )
      check: >
        (c,ev) => {
          if (!c.el.login.value) {
             c.el.login.style['background-color'] = 'pink';
          } else {
             delete c.el.login.style['background-color'];
             // c.el.login.style['background-color'] = 'green';
          }
          if (!c.el.password.value) {
             c.el.password.style['background-color'] = 'pink';
          } else {
             delete c.el.password.style['background-color'];
             // c.el.password.style['background-color'] = 'green';
          }
        }

      checkCreate: >
        (c,ev) => {
          if (!c.el.handle.value) {
             c.el.handle.style['background-color'] = 'pink';
          } else {
             delete c.el.handle.style['background-color'];
             // c.el.handle.style['background-color'] = 'green';
          }
          if (!c.el.email.value) {
             c.el.email.style['background-color'] = 'pink';
          } else {
             delete c.el.email.style['background-color'];
             // c.el.email.style['background-color'] = 'green';
          }
          if (!c.el.password.value) {
             c.el.password.style['background-color'] = 'pink';
          } else {
             delete c.el.password.style['background-color'];
             // c.el.password.style['background-color'] = 'green';
          }
        }

      login: >
        (c,login,password) => c.data.get('app')
          .login( { login, password } )
           .then( acct => { c.el.login.value = ''; 
                            c.el.password.value = ''; 
                            c.data.set( 'login', acct );
                            c.broadcast( 'login', acct );
                          })
           .catch( err => { alert(err); } )
      logout: >-
        c => yote.logout( c.data.get('appName') )
             .then( msg => { c.data.set('login',undefined); c.broadcast( 'logout' ) } )
             .catch( err => { c.data.set('login',undefined); c.broadcast( 'logout' ) } )
      createAccount: >
        (c,handle,email,password) => app()
           .create_account( { handle, email, password } )
                     .then( acct => { c.el.email.value = ''; 
                                      c.el.login.value = ''; 
                                      c.el.password.value = ''; 
                                      c.data.set( 'login', acct );
                                      c.broadcast( 'login', acct );
                                     } )
                    .catch( err => alert(err) )
                    
    contents:
      - div:
          - div:
              # logged in / logout
              if: c => c.data.get( 'login' )
              contents:
                - span: c => `welcome ${c.data.get('login').handle}`
                - a:
                    textContent: log out
                    href: '#'
                    on_click: >-
                      (c,ev) => {
                        ev.preventDefault();
                        return c.fun.logout();
                      }
          - div:
              # create account
              elseif: c => c.data.get( 'create-account' )
              contents:
                - form:
                    on_submit: >-
                      (c,ev) => { ev.preventDefault();
                         c.fun.createAccount( c.el.handle.value,
                                              c.el.email.value,
                                              c.el.password.value ) }
                    style: display: inline-block; border: solid 3px black; padding: .5em;
                    contents:
                      - div:
                          style: display:flex; flex-direction: column
                          contents:
                            - input:
                                handle: handle
                                placeholder: handle
                                type: text
                                style: margin: 3px auto
                                required: true
                                on_keyup: (c,ev) => c.fun.checkCreate(ev)
                            - input:
                                handle: email
                                placeholder: email
                                type: text
                                style: margin: 3px auto
                                required: true
                                on_keyup: (c,ev) => c.fun.checkCreate(ev)
                            - input:
                                handle: password
                                style: margin: 3px auto
                                type: password
                                placeholder: password
                                required: true
                                on_keyup: (c,ev) => c.fun.checkCreate(ev)
                            - button:
                                style: margin: 3px auto
                                type: submit
                                textContent: Create Account
          - div:
              # login
              elseif: c => c.data.get( 'app' )
              contents:
                - form:
                    on_submit: (c,ev) => { ev.preventDefault(); c.fun.login( c.el.login.value, c.el.password.value ) }
                    style: display: inline-block; border: solid 3px black; padding: .5em;
                    contents:
                      - div:
                          style: display:flex; flex-direction: column
                          contents:
                            - input:
                                handle: login
                                placeholder: login or email
                                type: text
                                style: margin: 3px auto
                                required: true
                                on_keyup: (c,ev) => c.fun.check(ev)
                            - input:
                                handle: password
                                style: margin: 3px auto
                                type: password
                                placeholder: password
                                required: true
                                on_keyup: (c,ev) => c.fun.check(ev)
                            - button:
                                style: margin: 3px auto
                                type: submit
                                textContent: Log In
                            - a:
                                href: '#'
                                on_click: (c,ev) => c.data.set('create-account','1')
                                textContent: 'create account'
