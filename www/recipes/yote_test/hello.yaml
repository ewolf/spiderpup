---

import:
  logins: yote_test/logins

css: >-
  @keyframes blinker {
    50% {
      border: solid 3px green;
      opacity: 0;
    }
  }
  

less: >-
  .loading {
    color: blue;
    animation: blinker 4s linear infinite;
  }

  .counter {
    border: solid 3px brown;
    margin: 12px;
    padding: 5px;
    span {
      margin: 0 10px;
    }
  }
  body {
    .button {
       border: solid 1px black;
       cursor: pointer;
    }
    margin: 0;
    header {
       background-color: pink;

       height: 2em;
       top: 0;
       width: 100%;
       position: fixed;

       > div {
        padding: 4px;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
       }
    }
    .demo {
      display: flex;
      flex-direction: row;
      border: solid 2px black;
      form {
        padding: 2px;
        margin: 0 3px;
        border: solid 2px black;
        display: flex;
        flex-direction: column;
      }
    }
    main {
       margin-top: 2em;
       display: flex;
       > div {
          margin: 0 auto;
       }
       form {
         margin-block-end: 0;
         a {
           text-align: center;
         }
       }
    }
  }

javascript: >-
  function does() { console.log('hoeet') }
  const stilldoes = () => console.log( 'still' );
  console.log('loaded javascript');

functions:
  pageMode: >-
    (s,mode) => {
      if ( s.data.pageMode !== mode ) {
        history.pushState( { pageMode: mode }, undefined, mode === 'default' ? '/yote_test/hello.html' : `?pageMode=${mode}` );
        s.data.pageMode = mode;
        s.refresh();
      }
    }
  greetings: (body,ev) => alert( `hello there from ${ev.target}` )

data:
  appName: test
  pageMode: default

onLoad: >-
  s => {
    // listen to page change event
    //s.namespace.logins.functions.tease();
    addEventListener( 'popstate', ev => {
      s.data.pageMode = ev.state && ev.state.pageMode || 'default'
      s.refresh();
    } );

    does();
    stilldoes();
    yote.fetchAppTryLogin( s.data.appName )
      .then( app => {
        if (app) {
          s.broadcast( 'app', app );
          if (app.acct) {
            s.broadcast( 'login', app.acct );
          }
        }
      });
      
      // connect the widgets together
      //s.comp.header.fun.attach( s.comp.loginBodyWidget );
      // try to look at the url. maybe it wants login?
      const usp = new URLSearchParams( window.location.search );
      for (const [key, value] of usp) {
         if (key === 'pageMode') {
           s.data.pageMode = value
         }
      }
      s.comp.header.fun.attach(s.comp.loginBodyWidget)
  }

listen: >-
  (s,msg,data) => {
    switch( msg ) {
      case "login":
        s.data.msg = data
        s.fun.pageMode( 'default' );
        break;
      case "app":
        s.data.msg = data
        break;
      case "pageMode":
        // maybe navigate to a new url
        // catch that and have that in the history?
        // so there is no reload
        s.fun.pageMode( data );
        //s.data.msg = data
        break;
      case "logout":
        s.data.login = undefined
        s.fun.pageMode( 'default' );
        break;
    }
  }

title: fun example

body:
  style: background: wheat;
  on_keyup: >-
    s => { 
       if (ev.key === 'Escape') { 
          s.broadcast( 'keyup', 'Escape');
          s.broadcast( 'pageMode', 'default' );
      } 
    }
  contents:
    - logins.siteHeader:
        handle: header
    - main:
        - div:
            - h1: s => s.data.pageMode

            - logins.loginBodyWidget:
                handle: loginBodyWidget
                if: s => s.data.pageMode === 'login-control'
            - div:
                if: s => s.data.login && s.data.pageMode !== 'login-control'
                textContent: logged in stuff
            - div:
                if: s => s.data.app && s.data.pageMode !== 'login-control'
                contents:
                  - div:
                      - form:
                          on_submit: >-
                            s => {
                                ev.preventDefault();
                                yote.apps.test.echo( s.el.something.value )
                                   .then( r => alert( 'hello world ' + r ) ); }
                          contents:
                            - input:
                                placeholder: say something
                                handle: something
                                required: true
                            - button: click me
                      - counter:
                          data:
                            title: counter 1
                      - counter:
                          data:
                            clicks: 12
                      - button:
                          type: button
                          on_click: (body,ev) => body.fun.greetings(ev)
                          textContent: click me
                          style: font-weight: bold;
                  - hr:
                  - demo:
            - div:
                if: s => ! s.data.app
                textContent: app not yet loaded

recipes:

  counter:
    data:
      clicks: 0
      title: no title set
    contents:
      - div:
          class: counter
          contents:
            - h2: s => s.data.title
            - div:
                - button:
                    textContent: '<'
                    on_click: s => s.data.clicks++
                - span: s => `${s.data.clicks} clicks`
                - button:
                    textContent: '>'
                    on_click: s => s.data.clicks++
  demo:
    data:
      yamlText: ''
      loaded: false
    onLoad: >-
      s => {
        yote.apps.test.fetch_yaml()
           .then( txt => {
              s.data.yamlText = txt;
              s.data.loaded = true;
              s.refresh();
          } );
      }
    contents:
      - div:
          class: demo
          contents:
            - form:
                if: s => s.data.loaded' ) 
                on_submit: >-
                  s => {
                    ev.preventDefault();
                    s.data.loaded = false
                    yote.apps.test.install_yaml(s.el.yaml.value)
                      .then( r => { 
                         s.data.loaded = true;
                         s.refresh();
                      } )
                  }
                contents:
                  - h3: Spiderpup Yaml
                  - textarea:
                      handle: yaml
                      textContent: s => s.data.yamlText
                      on_keyup: s => s.data.yamlText = ev.target.value
                  - button: generate output
            - div:
                if: s => s.data.loaded' ) 
                contents:
                  - h3: Yaml output
                  - iframe:
                      src: /yote_test/test.html
            - div:
                class: loading
                else:
                textContent: loading
