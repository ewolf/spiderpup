---

javascript: |

  function reset() {
    // empty and clear attributes
    document.body.innerHTML = '';
  }

  function elPath(string) {
    const pathParts = string.toLowerCase().split( '|' );
    
    if (pathParts.length === 0 || pathParts[0] !== 'body') {
      console.warn( "elPath path must start with body. that's just how it is" );
      return undefined;
    }

    let node = document.body;
    for (let i=1; i<pathParts.length; i++) {
      let [ pp, number, tag ] = pathParts[i].split( /^(\d+)[^a-z]*(.*)$/ );
      number = parseInt(number);
      const childel = node.children[number];
      if (childel && childel.tagName === tag.toUpperCase()) {
        node = childel;
      } else {
        return undefined;
      }
    }

    return node;
  } //elPath

  let ran = 0;
  let passes = 0;
  let fails = 0;

  function is( actual, expected, msg ) {
    if (actual === expected) {
      passes++;
      console.log( `passed: test '${msg}'` );
    } else {
      fails++;
      console.log( `failed: test '${msg}'. expected '${expected}' and got '${actual}'` );
    }
  }
  function pass (msg) {
    ran++;
    passes++;
    console.log( `passed: test '${msg}'` );
  }
  function fail (msg) {
    ran++;
    fails++;
    console.log( `FAILED: test '${msg}'` );
  }
  function doneTesting() {
    if (ran === passes) {
      console.log( `PASSED ALL ${ran} TESTS` );
    } else {
      console.log( `FAILED ${fails} of ${ran} TESTS` );
    }
  }
  function checkNode( path, expected_attrs, msg ) {
    const actualEl = elPath( path );
    if (! actualEl) {
      fail( `${msg} : html element not found` );
      return;
    }
    let passes = true;
    let failmsg = '';
    // check the expected attrs
    Object.keys( expected_attrs ).forEach( attr => {
      if (attr === 'textContent') {
        passes = passes && (actualEl.childNodes[0] && actualEl.childNodes[0].textContent) === expected_attrs[attr];
        if (!passes) {
          failmsg = `expected text '${expected_attrs[attr]}' and got '${actualEl.innerText}'`;
        }
      } else {
        passes = passes && actualEl.getAttribute( attr ) === expected_attrs[attr];
        if (!passes) {
          failmsg = `expected for attribute ${attr} : '${expected_attrs[attr]}' and got '${actualEl.getAttribute(attr)}'`;
        }
      }
    } );
    if (passes) {
      pass( msg );
    } else {
      fail( msg + ' ' + failmsg );
    }

    return passes;
  }

  function el (tag, attrs, contents) {
    if (Array.isArray( attrs ) ) {
      contents = attrs;
      attrs = {};
    } else {
      if (typeof attrs !== 'object') {
        attrs = { textContent: attrs };
      }
    }
    contents = contents || [];
    const calculate = {};
    // check for calculations. if the attr is a number
    const attrNames = Object.keys( attrs );
    attrNames.forEach( attr => {
      if ( Number.isInteger( attrs[attr] ) ) {
        calculate[attr] = attrs[attr];
        delete attrs[attr];
      } 
    } );
    return { tag, attrs, contents, calculate };
  }

  function node(tag, args) {
    return { tag, functions:(args&&args.functions) || {}, data: (args&&args.data) || {} };
  }

  // so we want to grab some json and compile it and stuff as a namespace, then attach it to the body
  function test() {
    reset();
    const def = 
        { TEST: 
            { html: { body: { contents: [ el( 'span', "FIRST" ),
                                          el( 'div', "SECOND",
                                              [
                                                node( 'foo' ),
                                                node( 'foo', { functions: { bar: 1 } } ),
                                              ] )
                                        ] } },
              components: {
                foo: {
                  functions: {
                    bar: 0
                  },
                  contents: [
                    el ( 'div', '', [
                      el ('span', { textContent: 2 } ),
                    ] ),
                  ],
                },
              },
            },
          };

    init( def,
          [ c => "BAR",
            c => "BAR2",
            c => c.fun.bar()
          ],
          'TEST'
        );
    checkNode( "body|0 span", { textContent: 'FIRST' }, 'first div text' );
    checkNode( "body|1 div", { textContent: 'SECOND' }, 'second div text' );
    checkNode( "body|1 div|0 div|0 span", { textContent: 'BAR' }, 'first bar' );
    checkNode( "body|1 div|1 div|0 span", { textContent: 'BAR2' }, 'bar override' );
    doneTesting();
  }

body:
  textContent: x
  onLoad: c => test()
