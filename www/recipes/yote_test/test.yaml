---

#
# Tests.
# 
#   this tests client spiderpup javascript by 
#   writing data structures like the server would
#   have in the page and executing them.
#
#   it provies a path (from body) structure that returns
#   an element. body must be the first thing in this. 
#   Path parts are delimited by pipe characters. The body
#   stands alone, but each subsequent path item is a number
#   followed by an html tag. the number is the index in the
#   children list of the previous element.
#
#   completed
#     simple html structure
#     include components
#     include components function override
#     nodes with internal content and a specified spot
#     nodes with internal content and no specified spot
#     namespace inclusions
#     functions inherited from default namespace
#     functions inherited from non-default namespace
#     if/elseif/else with elements
#     if/elseif/else with components
#     nodes with internal content that has if/then
#     foreach with looping elements
#
#   todo
#     foreach with looping components
#     foreach with if/elseif/else
#     foreach with internal content
#     foreach with nodes and if/elseif/else
#     foreach with nodes and internal content
#     nodes with internal content that has foreach
#     nodes with internal content that has if/then and foreach
#
#     test css styles 
#     test less styles 
#     test javascript in seperate modules
#     add more todo
#



javascript: |

  function reset() {
    // empty and clear attributes
    document.body.innerHTML = '';
  }

  function elPath(string) {
    const pathParts = string.toLowerCase().split( '|' );
    
    if (pathParts.length === 0 || pathParts[0] !== 'body') {
      console.warn( "elPath path must start with body. that's just how it is" );
      return undefined;
    }

    let node = document.body;
    for (let i=1; i<pathParts.length; i++) {
      let [ pp, number, tag ] = pathParts[i].split( /^(\d+)[^a-z]*(.*)$/ );
      number = parseInt(number);
      const childel = node.children[number];
      if (childel && childel.tagName === tag.toUpperCase()) {
        node = childel;
      } else {
        return undefined;
      }
    }

    return node;
  } //elPath

  let ran = 0;
  let passes = 0;
  let fails = 0;

  function is( actual, expected, msg ) {
    ran++;
    if (actual === expected) {
      passes++;
      console.log( `passed: test '${msg}'` );
    } else {
      fails++;
      console.log( `failed: test '${msg}'. expected '${expected}' and got '${actual}'` );
    }
  }
  function pass (msg) {
    ran++;
    passes++;
    console.log( `passed: test '${msg}'` );
  }
  function fail (msg) {
    ran++;
    fails++;
    console.log( `FAILED: test '${msg}'` );
  }
  function doneTesting() {
    if (ran === passes) {
      console.log( `PASSED ALL ${ran} TESTS` );
    } else {
      console.log( `FAILED ${fails} of ${ran} TESTS, passed ${passes}` );
    }
  }
  function checkNode( path, expected_attrs, msg ) {
    const actualEl = elPath( path );
    if (! actualEl) {
      fail( `${msg} : html element not found` );
      return;
    }
    let passes = true;
    let failmsg = '';
    // check the expected attrs
    Object.keys( expected_attrs ).forEach( attr => {
      const val = expected_attrs[attr];
      if (typeof val === 'object' && val !== null) {
        const fld = Object.keys( val )[0];
        const eval = expected_attrs[attr][fld];
        const aval = actualEl[attr][fld];
        passes = passes && aval === eval;
        if (!passes) {
          debugger;
          failmsg = `expected property '${attr}.${fld}' to be '${eval}' and got '${aval}'`;
        }
      }
      else if (attr === 'textContent') {
        const textNode = actualEl.childNodes[0] && actualEl.childNodes[0].textContent;
        passes = passes && textNode === val;
        if (!passes) {
          debugger;
          failmsg = `expected text '${val}' and got '${textNode}'`;
        }
      } else {
        passes = passes && actualEl.getAttribute( attr ) === val;
        if (!passes) {
          debugger;
          failmsg = `expected for attribute ${attr} : '${val}' and got '${actualEl.getAttribute(attr)}'`;
        }
      }
    } );
    if (passes) {
      pass( msg );
    } else {
      fail( msg + ' ' + failmsg );
    }

    return passes;
  }

  function el(tag, attrs, contents) {
    if (Array.isArray( attrs ) ) {
      contents = attrs;
      attrs = {};
    } else {
      if (typeof attrs !== 'object') {
        attrs = { textContent: attrs };
      }
    }
    contents = contents || [];
    const calculate = {};
    // check for calculations. if the attr is a number
    const attrNames = Object.keys( attrs );

    const elNode = { tag, attrs, contents, calculate };
    
    attrNames.forEach( attr => {
      if (attr.match(/^(if|elseif|else|foreach|forval|data)$/)) {
        elNode[attr] = attrs[attr];
        delete attrs[attr];
      }
      if ( Number.isInteger( attrs[attr] ) ) {
        calculate[attr] = attrs[attr];
        delete attrs[attr];
      } 
      else if (attr === 'internalContent' ) {
        elNode.internalContent = true;
        delete attrs[attr];
      }
    } );
    return elNode;
  }

  function node(tag, args, contents) {
    if (Array.isArray(args)) {
      contents = args;
      args = undefined;
    }
    const n = { tag, attrs: {} };
    
    [ 'functions', 'data' ]
      .forEach( fld => ( n[fld] = (args && args[fld]) || {} ) );

    args && Object.keys( args ).forEach( fld => {
      if (fld.match(/^(if|elseif|else|foreach|forval)/)) {
        n[fld] = args[fld];
      }
      // else if(fld.match(/^(functions|data)$/)) {
      else if(fld.match( /^(functions|data)$/)) {
        // already covered
      }
      else {
        // attribute for the root element
        n.attrs[fld] = args[fld];
      }
    } );

    if (contents) {
      n.contents = contents;
    }
    return n;
  }

  // so we want to grab some json and compile it and stuff as a namespace, then attach it to the body
  function test() {
    reset();
    const def = 
        { 
          TEST: {
            namespaces: {
              ON: 'OTHERNAME',
            },
            data: {
              blat: 'i1',
            },
            html: { 
              body: { 
                contents: [ el( 'span', "FIRST" ), //0
                            el( 'div', "SECOND", //1
                                [
                                  node( 'foo' ),
                                  node( 'foo', { functions: { bar: 1 } } ),
                                  node( 'foo', { functions: { bar: 3 } },
                                        [ el( 'span', 'a span' ),
                                          el( 'span', 'with stuff' ) ] ),
                                  node( 'foo', [ el( 'ul', 
                                                     [el( 'li', 'I am' ),
                                                      el( 'li', { textContent: 5 } ),
                                                      el( 'li', 'in' ) ] ) ] ),
                                ] ),
                            node( 'ON.containery' ), //2
                            node( 'ON.containery', [   //3
                              el( 'div', 'in the middle' )
                            ] ),
                            node( 'ON.containery', //4
                                  [
                                    el( 'div', { 
                                      if: 10,
                                      textContent: 'in a middle' } ),
                                    el( 'div', { 
                                      else: true,
                                      textContent: 'nop nope' } ),
                                  ] ),
                            node( 'ON.containery', //5
                                  { data: { blat: 'i2' } },
                                  [
                                    el( 'div', { 
                                      if: 10,
                                      textContent: 'in o middle' } ),
                                    el( 'div', { 
                                      else: true,
                                      textContent: 'nope nope im the else' } ),
                                  ]
                                ),
                            el( 'div', [ //6
                              node( 'iffy', { data : { number: 'i3' } }),
                              node( 'iffy', { data : { number: 'i2' } }),
                              node( 'iffy' ),
                            ] ),

                            el( 'div', [ //7
                              node( 'foo',
                                    { data: { echo: 'nothing to say' } },
                                    [
                                      node( 'echo', { if: 13,     class: 'fail' } ), 
                                      node( 'echo', { elseif: 12, class: 'default' } ), 
                                      node( 'echo', { else: true, class: 'never' } ),
                                    ] ),

                              el ('div', [
                                node( 'echo', { if: 13,     class: 'fail' } ), 
                                node( 'echo', { elseif: 12, class: 'default' } ), 
                                node( 'echo', { else: true, class: 'never' } ),
                              ] ),

                            ] ),
                                  
                            el( 'section', [ //8 foreach land
                              el( 'div', [
                                el( 'span', { foreach: 14, forval: 'numb', textContent: 15 } )
                              ] ),
                              el( 'div', [
                                node( 'echo', { foreach: 16, forval: 'numb', data:{ echo: 'c15'} } )
                              ] ),
                            ] ),
                          ] }, //body
            }, //html
            components: {

              foo: {
                functions: {
                  bar: 0
                },
                contents: [
                  el ( 'div', '', [
                    el ('span', { textContent: 2 } ), // 2 references a function in the function list
                  ] ),
                ],
              }, // foo component

              echo: {
                contents: [ el( 'span', { textContent: 11} ) ],
              },


              iffy: {
                data: { number: 'i1' },
                contents: [
                  el ('div', [
                    el ('h1', { if: 8, textContent: 'is one' } ),
                    el ('h2', { elseif: 9, textContent: 'is two' } ),
                    el ('h3', { else: true, textContent: 'whuddeveh' } ),
                  ] )
                ],
              }, //  iffy component

            }, //components
            
            functions: {
              groan: 4,
            } //functions

          }, //TEST (default)
          


          OTHERNAME: {
            components: {
              containery: {
                contents: [
                  el( 'div', [
                    el( 'header', 'head' ),
                    el( 'main', { textContent: 'main', internalContent: true } ),
                    el( 'footer', { textContent: 7 } ),
                  ] ),
                ],
              },
            }, 
            functions: {
              foot: 6,
            },
          }, //OTHER (namespace)
          
        }; // filespaces

    init( def,

                        [ c => "BAR",         // 0
                          c => "BAR2",        // 1
                          c => c.fun.bar(),   // 2
                          c => "BAR3",        // 3
                          c => "groan",       // 4
                          c => c.fun.groan(), // 5
                          c => "foot",        // 6
                          c => c.fun.foot(),  // 7
                          c => c.get('number') == 1, // 8
                          c => c.get('number') < 3,  // 9
                          c => c.get('blat') == 1,   // 10
                          c => c.get('echo'),  // 11
                          c => c.get('echo') === 'nothing to say',  // 12
                          c => false,          // 13
                          c => [1,2,3,4],      // 14
                          c => c.idx.numb + ") " + c.it.numb, //15
                          c => [2,4,6,8],      // 16
                        ], // functions list

                        'TEST' // default filespace (the one with the body)
                      ); 

    checkNode( "body|0 span", { textContent: 'FIRST' }, 'first div text' );

    checkNode( "body|1 div", { textContent: 'SECOND' }, 'second div text' );
    checkNode( "body|1 div|0 div|0 span", { textContent: 'BAR' }, 'first bar' );
    checkNode( "body|1 div|1 div|0 span", { textContent: 'BAR2' }, 'bar override' );

    checkNode( "body|1 div|2 div|0 span", { textContent: 'BAR3' }, 'third bar' );
    checkNode( "body|1 div|2 div|1 span", { textContent: 'a span' }, 'third bar with listed contents 1' );
    checkNode( "body|1 div|2 div|2 span", { textContent: 'with stuff' }, 'third bar with listed contents 1' );

    checkNode( "body|1 div|3 div|0 span", { textContent: 'BAR' }, 'fourth bar' );
    checkNode( "body|1 div|3 div|1 ul|0 li", { textContent: 'I am' }, 'fourth bar with more content 1' );
    checkNode( "body|1 div|3 div|1 ul|1 li", { textContent: 'groan' }, 'fourth bar with more content 2' );
    checkNode( "body|1 div|3 div|1 ul|2 li", { textContent: 'in' }, 'fourth bar with more content 3' );

    checkNode( "body|2 div|0 header", { textContent: 'head' }, 'containery 1 head' );
    checkNode( "body|2 div|1 main", { textContent: 'main' }, 'containery 1 main' );
    checkNode( "body|2 div|2 footer", { textContent: 'foot' }, 'containery 1 footer' );

    checkNode( "body|3 div|0 header", { textContent: 'head' }, 'containery 2 head' );
    checkNode( "body|3 div|1 main", { textContent: 'main' }, 'containery 2 main' );
    checkNode( "body|3 div|1 main|0 div", { textContent: 'in the middle' }, 'containery 2 added content' );
    checkNode( "body|3 div|2 footer", { textContent: 'foot' }, 'containery 2 footer' );

    checkNode( "body|6 div|0 div|0 h1", { style: {display: 'none'}, textContent: undefined }, 'else test (hidden 1)' );
    checkNode( "body|6 div|0 div|1 h2", { style: {display: 'none'}, textContent: undefined }, 'else test (hidden 2)' );
    checkNode( "body|6 div|0 div|2 h3", { style: {display: ''}, textContent: 'whuddeveh' }, 'else test (not hidden)' );

    checkNode( "body|6 div|1 div|0 h1", { style: {display: 'none'}, textContent: undefined }, 'elseif test (hidden 1)' );
    checkNode( "body|6 div|1 div|1 h2", { style: {display: ''}, textContent: 'is two' }, 'elseif test (not hidden)' );
    checkNode( "body|6 div|1 div|2 h3", { style: {display: 'none'}, textContent: undefined }, 'elseif test (hidden 3)' );

    checkNode( "body|6 div|2 div|0 h1", { style: {display: ''}, textContent: 'is one' }, 'if test (not hidden)' );
    checkNode( "body|6 div|2 div|1 h2", { style: {display: 'none'}, textContent: undefined }, 'if test (hidden 3)' );
    checkNode( "body|6 div|2 div|2 h3", { style: {display: 'none'}, textContent: undefined }, 'if test (hidden 3)' );

    // check instance data 
    let elseInst = elPath( "body|6 div|0 div" ).instance;
    is (elseInst.get('number'), 3, 'else instance correct data');

    let elseifInst = elPath( "body|6 div|1 div" ).instance;
    is (elseifInst.get('number'), 2, 'elseif instance correct data');

    let ifInst = elPath( "body|6 div|2 div" ).instance;
    is (ifInst.get('number'), 1, 'if instance correct data');

    // update the number and see what changes
    elseInst.set('number', 1);
    elseInst.refresh();
    checkNode( "body|6 div|0 div|0 h1", { style: {display: ''}, textContent: 'is one' }, 'else to if test (not hidden)' );
    checkNode( "body|6 div|0 div|1 h2", { style: {display: 'none'}, textContent: undefined }, 'else to if test (hidden 3)' );
    checkNode( "body|6 div|0 div|2 h3", { style: {display: 'none'}, textContent: 'whuddeveh' }, 'else to if test (hidden 3 but still has old text content)' );

    elseInst.set('number', 2);
    elseInst.refresh();
    checkNode( "body|6 div|0 div|0 h1", { style: {display: 'none'}, textContent: 'is one' }, 'else to if test (hidden, still has old text content)' );
    checkNode( "body|6 div|0 div|1 h2", { style: {display: ''}, textContent: 'is two' }, 'else to if test (hidden 3)' );
    checkNode( "body|6 div|0 div|2 h3", { style: {display: 'none'}, textContent: 'whuddeveh' }, 'else to if test (hidden 3 but still has old text content)' );
    
    checkNode( "body|4 div|1 main|0 div", { style: {display: ''}, textContent: 'in a middle' }, 'containery 3 added content if yes part' );
    checkNode( "body|4 div|1 main|1 div", { style: {display: 'none'}, textContent: undefined }, 'containery 3 added content if no part' );

    checkNode( "body|5 div|1 main|0 div", 
               { style: {display: 'none'}, textContent: undefined },
               'containery 4 added content if no part' );
    checkNode( "body|5 div|1 main|1 div", 
               { style: {display: ''}, textContent: 'nope nope im the else' }, 
               'containery 4 added content if yes part' );

    checkNode( "body|5 div|1 main|1 div", 
               { style: {display: ''}, textContent: 'nope nope im the else' }, 
               'containery 4 added content if yes part' );

    checkNode( "body|7 div|0 div|1 span", 
               { style: {display: 'none'}, class: null, textContent: undefined }, 
               ' foo echo first not showing, so no class for it either' );

    checkNode( "body|7 div|0 div|2 span", 
               { style: {display: ''}, class: 'default', textContent: 'nothing to say' }, 
               ' foo echo second showing' );
    checkNode( "body|7 div|0 div|3 span", 
               { style: {display: 'none'}, class: null, textContent: undefined }, 
               ' foo echo third not showing, class not yet set' );


    checkNode( "body|7 div|1 div|0 span", 
               { style: {display: 'none'}, class: null, textContent: undefined }, 
               ' in body echo first not showing, so no class for it either' );
    checkNode( "body|7 div|1 div|1 span", 
               { style: {display: 'none'}, class: null, textContent: undefined }, 
               ' in body echo second showing, class was removed because it is hidden' );
    checkNode( "body|7 div|1 div|2 span", 
               { style: {display: ''}, class: 'never', textContent: undefined }, 
               ' in body echo third now showing and class is set, but no textContent to show since echo not set in that instance' );

    // update

    let elp = elPath( "body|7 div|0 div" );
    let instance = elp.instance;

    instance.set("echo","NUBU");
    instance.refresh();

    checkNode( "body|7 div|0 div|1 span", 
               { style: {display: 'none'}, class: null, textContent: undefined }, 
               ' foo echo first not showing, so no class for it either' );
    checkNode( "body|7 div|0 div|2 span", 
               { style: {display: 'none'}, class: null, textContent: undefined }, 
               ' foo echo second showing, class was removed because it is hidden' );
    checkNode( "body|7 div|0 div|3 span", 
               { style: {display: ''}, class: 'never', textContent: 'NUBU' }, 
               ' foo echo third now showing and class is set' );

    // foreach tests
    checkNode( "body|8 section|0 div|0 span", 
               { textContent: '0) 1' }, 'first foreach span' );
    checkNode( "body|8 section|0 div|1 span", 
               { textContent: '1) 2' }, 'second foreach span' );
    checkNode( "body|8 section|0 div|2 span", 
               { textContent: '2) 3' }, 'third foreach span' );
    checkNode( "body|8 section|0 div|3 span", 
               { textContent: '3) 4' }, 'fourth foreach span' );


    doneTesting();

  }

body:
  textContent: x
  onLoad: c => test()
