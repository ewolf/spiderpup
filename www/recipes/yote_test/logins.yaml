---

less: >-
  .button {

  }
  .login-header-widget {
      ul {
          position: absolute;
          right: 4px;
          padding: 10px;
          border: solid blue 3px;
          margin: 0;
          background-color: #dfd;
      }
      li {
          list-style-type: none;
          cursor: pointer;
      }
      li:hover {
          background-color: #aca;
      }
      li.divider {
          height: 1px;
          margin: 0.25rem 0;
          padding: 0;
          background-color: #dbdbdb;
      }
  }
  .dialog.showing {
      display: flex;
  }
  .dialog {
     .dialog-content {
         z-index: 3;
         padding: 1em;
         background-color: white;
     }
     display: none;
     .dialog-curtain {
        left:0;
        top:0;
        width:100%;
        height:100%;
        opacity: .6;
        background-color: #000;
        position: fixed;
     }
  }
  .login-body-widget {
      background-color: lightyellow;
      position: absolute;
  }
  
recipes:

  row:
    - div:
        style: display: flex;  flex-direction: row
  col:
    - div:
        style: display: flex;  flex-direction: column

  # generic site header with login control on the right hand side
  # data:
  #   * logoImage
  #   * logoText
  siteHeader:
    # once everything is rendered, fetch app and try to log in
    postRender: >-
      s => {
        yote.fetchAppTryLogin( s.data.appName )
          .then( app => {
              if (app) {
                s.broadcast( 'logins:got-app', app );
                if (app.acct) {
                   s.broadcast( 'logins:logged-in', app.acct );
                }
              }
          } );
      }

    # header bar with a logo on the left,
    # account and login (if there is an app) on the right
    contents:
      - header:
          - div:
              - div:                  
                  class: button
                  on_click: (s,e) => s.broadcast( 'logins:click-logo' )
                  contents:
                    - img:
                        if: s => s.data.logoImage
                        src: s => s.data.logoImage
                    - div:
                        else:
                        textContent: s => s.data.logoText || 'LOGO'
              - loginHeaderWidget:

  # this is meant to go in the top right header
  # 
  # it is empty unless 'app' is in the data.
  # if 'login' is in data, user is logged in.
  # the data is expected to come from the enclosing
  # page.
  #
  # when not logged in
  #   appears with the text 'log in'
  #   a click broadcasts pageMode login-control
  #
  # when logged in
  #   shows the avatar and a down arrow
  #   is clickable
  #   clicking reveals a menu underneath with
  #     account controls
  #       log out - broadcasts 'logout'
  #
  loginHeaderWidget:
    data:
      showMenu: false

    listen: >-
      (c,key,data) => {
         if (key === 'logins:got-app') {
            c.data.app = data;
         }
         else if (key === 'logins:logged-in') {
            c.data.login = data;
         }
      }


    functions:
      logout_done: >-
        c => {
          c.data.showMenu = false;
          c.broadcast( 'logins:logout' );
        }

      logout: >-
        c => yote.logout( c.data.appName )
             .then( msg => c.fun.logout_done() )
             .catch( err => c.fun.logout_done() )
      listen: >-
        (c,key,msg) => {
          if ((key === 'keyup' && msg === 'Escape') || key === 'body-click' ) {
            c.data.showMenu = false;
          }
        }

    contents:
      - div:
          class: login-header-widget
          contents:
            - div:
                # is logged in, so a click shows the menu
                # toto: fill in avatar
                if: c => c.data.login
                contents:
                  - button:
                      type: button
                      on_click: c => c.data.showMenu = ! c.data.showMenu
                      contents:
                        - span:
                            innerHTML: () => 'avatar &#8964';
            - div:
                # button to open login / create thingo
                elseif: c => c.data.app
                contents:
                  - button:
                      type: button
                      textContent: log in
                      # maybee catch the pageMode change?
                      on_click: c => c.comp.loginBodyWidget.fun.show()

            # account menu 
            - ul:
                handle: menu
                if: c => c.data.showMenu
                contents:
                  - li: identity
                  - li: 
                      class: divider
                  - li: set status
                  - li: 
                      textContent: edit profile
                      on_click: c => c.broadcast( 'pageMode', 'login-control' )
                  - li:
                      class: divider
                  - li:
                      textContent: log out
                      on_click: c => c.fun.logout()

            # login dialog
            - loginBodyWidget:
                handle: loginBodyWidget

  # dialog that centers on the page
  dialog:
    data:
      showing: false
      title: ''
    functions:
      setTitle: (c,title) => c.data.title = title
      show: >-
        c => {
          // position this in the middle of the page
          // left should be ... (screen width / 2) - (widget width / 2)
          // top should be ... (screen height / 2) - (widget height / 2)
          c.data.showing = true;
          c.rootEl.classList.add( 'showing' );
          const box = c.rootEl.getBoundingClientRect();
          c.rootEl.style.right = `${Math.round((window.innerWidth / 2) - (box.width/2))}px`;
          c.rootEl.style.top = `${Math.round((window.innerHeight / 2) - (box.height/2))}px`;
        }
      hide: c => c.rootEl.classList.remove( 'showing' );

    contents:
      - div:
          - div:
              class: dialog-content
              contents:
                - row:
                    contents:
                      - div:
                          class: dialog-title
                          style: flex-grow: 1;
                          textContent: s => s.data.title
                      - button:
                          class: dialog-close
                          style: padding: 3px; margin: 3px; border: solid black 3px;
                          textContent: X
                          on_click: s => s.fun.hide()
                - div:
                    fill: true
          - div:
              class: dialog-curtain
              if: s => s.data.showing

  # dialog for logging in 
  loginBodyWidget:
    data:
      mode: 'login'
      title: Log In

    functions:
      clear: >-
        c => {
          c.data.err = undefined;
          ['login','loginPassword','email','login','password']
            .forEach( ctl => c.el[ctl] && (c.el[ctl].value = '' ) );
        }

      login: >-
        (c,login,password) => {
          c.data.app
            .login( { login, password } )
            .then( acct => { c.fun.clear();
                             c.broadcast( 'login', acct );
                           })
            .catch( err => { c.data.err = err; c.refresh() } );
        }
      createAccount: >-
        (c,handle,email,password) => {
          c.data.app
            .create_account( { handle, email, password } )
                     .then( acct => { c.fun.clear();
                                      c.broadcast( 'login', acct );
                                     } )
           .catch( err => { c.data.err = err; c.refresh() } )
        }

    listen: >-
      (c,key,msg) => {
        if (key === 'keyup' && msg === 'Escape' ) {
          c.data.mode = 'login';
          c.fun.clear();
        }
      }
    contents:
      - dialog:
          class: c => `dialog login-body-widget${c.data.showing? ' showing':''}`
          style: border: solid 3px black; color: red; background-color: white;
          contents:
            - div:
                if: c => c.data.mode === 'show-create-account'
                textContent: create account form
            - div:
                elseif: c => c.data.mode === 'show-edit-profile'
                textContent: edit profile form
            - loginForm:
                else:
                textContent: login form
                
            # - createAccountForm:
            #     handle: createAccountForm
            #     if: c => c.data.mode === 'show-create-account'
            # - editProfileForm:
            #     handle: editProfileForm
            #     elseif: c => c.data.mode === 'show-edit-profile'
            # - loginForm:
            #     handle: loginForm
            #     else:
            - div:
                # error
                if: c => c.data.err
                style: background-color: pink; border: solid 1px; padding: 2px;
                textContent: c => c.data.err
  
  loginForm:
    functions:
      clear: >-
        c => {
          c.data.err = undefined;
          ['login','loginPassword','email','login','password']
            .forEach( ctl => c.el[ctl] && (c.el[ctl].value = '' ) );
        }
      check: >
        c => {
          ['login','password'].forEach( ctrl => {
            c.el[ctrl].style['background-color'] = c.el[ctrl].value ? null : 'pink';
          } )
        }
    contents:
      - form:
          on_submit: >-
            (c,ev) => { 
              ev.preventDefault(); 
              c.fun.login( c.el.login.value, c.el.password.value )
            }
          contents:
            - div:
                style: display:flex; flex-direction: column
                contents:
                  - input:
                      handle: login
                      placeholder: login or email
                      type: text
                      style: margin: 3px auto
                      required: true
                      on_keyup: c => c.fun.check()
                  - input:
                      handle: password
                      style: margin: 3px auto
                      type: password
                      placeholder: password
                      required: true
                      on_keyup: c => c.fun.check()
                  - button:
                      style: margin: 3px auto
                      type: submit
                      textContent: Log In
                  - a:
                      href: '#'
                      on_click: >-
                        (c,ev) => { 
                           ev.preventDefault();
                           c.parent.data.mode = 'show-create-account';
                           c.fun.clear();
                           c.parent.refresh() 
                        }
                      textContent: 'create account'

  createAccountForm:
    functions:
      clear: c => ['handle','email','password'].forEach( ctrl => (c.el[ctrl].value = '' ) )

      check: >-
        (c,ev) => {
          ['handle','email','password'].forEach( ctrl => 
            (c.el[ctrl].style['background-color'] = c.el[ctrl].value ? null : 'pink')
          )
        }

    contents:
      - form:
          on_submit: >-
            (c,ev) => { ev.preventDefault();
              c.fun.createAccount( c.el.handle.value,
                                   c.el.email.value,
                                   c.el.password.value ) }
          contents:
            - div:
                style: display:flex; flex-direction: column
                contents:
                  - input:
                      handle: handle
                      placeholder: handle
                      type: text
                      style: margin: 3px auto
                      required: true
                      on_keyup: c => c.fun.check()
                  - input:
                      handle: email
                      placeholder: email
                      type: text
                      style: margin: 3px auto
                      required: true
                      on_keyup: c => c.fun.check()
                  - input:
                      handle: password
                      style: margin: 3px auto
                      type: password
                      placeholder: password
                      required: true
                      on_keyup: c => c.fun.check()
                  - button:
                      style: margin: 3px auto
                      type: submit
                      textContent: Create Account
  editProfileForm:
    functions:
      clear: e => e
      check: >-
        (c,ev) => {
          ['handle','email','password'].forEach( ctrl => {
            c.el[ctrl].style['background-color'] = c.el[ctrl].value ? null : 'pink';
          } )
        }
    contents:
      - form:      
