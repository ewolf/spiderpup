---

less: >-
  pre {
    font-family: monospace;
    padding: 1em;
    background: wheat;
    display: inline-block;
  }
  section {
    bottom-border: solid 1px;
    padding: 1em;
  }
  .row {
    display: flex; 
    flex-direction: row; 
  }
  .col {
    display: flex; 
    flex-direction: row; 
  }

include:
  javascript: /js/xhr.js

data:
  chapters:
    -
      title: basics
      about: >-
        This introduces how html is modularized and assembled using spiderpup
      lessons:
        -
          title: hello world
          files: hello_word
        -
          title: hello again
          files: hello_again
        -
          title: additional css and javascript
          files:
            - head_additional
            - /css/examples/extra/head_additional_1.css
            - /css/examples/extra/head_additional_2.css
            - /js/examples/extra/head_additional_A.js
            - /js/examples/extra/head_additional_B.js

    -
      title: recipes
      about: >-
        Recipes are resuable snippets that can contain
        other recipes inside them. The recipes act like
        html tags. In this example, the 'main' component
        has the 'greeting' component included twice inside of it.
      lessons:
        - 
          title: basic recipes
          files: recipes
        - 
          title: embeded sections
          files: internal
        - 
          title: include recipes from other yaml files
          files: 
            - includes
            - impy
            - more_impy
    -
      title: state basics
      about: >-
        State is kept for the page and for each component placed
        on it. State data is used to calculate how the page appears.
      lessons:
        -
          title: recipes and state
          files: recipes_and_state
        -
          title: recipes and state data
          files: recipes_and_state
        -
          title: events and state
          files: events

        -
          title: recipes and functions
          files: recipes_and_functions

onLoad: >
  s => {
     const stems = 'hello_world|hello_again|recipes|internal|includes|defaults|head_addition|recipes_and_state|events|recipes_and_functions'
           .split( '|' )
           .map ( f => `/recipes/${f}` );
           console.log( s.data.chapters );
     //SP.xhr.openFile( '/recipes/s1.yaml' );
  }

title: learning spiderpup

body:
  - h1: learning spiderpup
  - p: This file teaches how to write spiderpup YAML by example.
  - p: To see the examples, start spiderpup and then you can click the links.
  - pre:
      textContent: >
        $ cd spiderpup/scripts

        $ morbo spiderpup

  - h2: spiderpup static basics
  - p: These examples show spiderpup transforming YAML into html. They introduce spiderpup reusable recipes.
  - chapters:


recipes:
  row:
    - div:
        class: row
  col:
    - div:
        class: col
  coly:
    - div:
        class: col

  bold:
    - span:
        style: font-weight: bold; font-size: larger;
  chapters:
    data:
      currPosition: 0
    contents:
      - div:
          - h2: browse chapters
          - coly:
              if: s => s.data.chapters  && s.data.chapters.length > 0
              contents:
                - div: HI
                - row:
                    - button:
                        textContent: previous
                        disabled: s => s.data.currPosition === 0
                        on_click: s => s.data.currPosition && s.data.currPosition--
                    - div: s => `showing ${1+s.data.currPosition} of ${s.data.chapters.length}`
                    - button:
                        textContent: next
                        disabled: s => s.data.currPosition >= (s.data.chapters.length-1)
                        on_click: s => s.data.currPosition <= (s.data.chapters.length-1) && s.data.currPosition++
                - col: 
                    - bold: About
                    - span: s => s.data.chapters[s.data.currPosition].about
          - div:
              else: true
              textContent: No Chapters
    

  #   functions:
  #     checkDisabled: >-
  #       s => {
  #         if (s.data.currPosition === 0) {
  #            s.el.previousButton.setAttribute( 'disabled', 'disabled' );
  #         } else {
  #            s.el.previousButton.removeAttribute( 'disabled' );
  #         }
  #         if (s.data.currPosition === (s.data.count-1)) {
  #            s.el.nextButton.setAttribute( 'disabled', 'disabled' );
  #         } else {
  #            s.el.nextButton.removeAttribute( 'disabled' );
  #         }
  #       }

  #     incOrDec: >-
  #       (s,doInc) => {
  #          doInc ? s.data.currPosition++ : s.data.currPosition--;
  #          s.fun.checkDisabled();
  #          s.fun.setLessons();
  #       }

  #     setLessons: >-
  #       s => {
  #         const lstate = s.comp.lessons;
  #         lstate.fun.setLessons( s.data.curr.lessons );
  #       }

  #   onLoad: >-
  #     s => {
  #       s.fun.checkDisabled();
  #     }

  #   contents:
  #     - div:
  #         - h1: HI
  #         - div:
  #             - button:
  #                 handle: previousButton
  #                 textContent: previous chapter
  #                 on_click: s => s.fun.incOrDec()
  #             - span: s => `showing ${1 + s.data.currPosition} of ${s.data.count}`
  #             - button:
  #                 handle: nextButton
  #                 textContent: next chapter
  #                 on_click: s => s.fun.incOrDec(true)
  #         - section:
  #             contents:
  #               - h2: s => s.data.curr.title
  #               - p: s => s.data.curr.about
  #               - lessons:
  #                   handle: lessons
  #                   data:
  #                     chapterLessons: s => s.data.curr.lessons
  #                     currLesson: 0
  #                     lessonCount: s => s.data.curr.lessons.length;
  #                     fooy: () => 123
  #                     issa: true
  #                     nyet: false
  # lessons:
  #   functions:

  #     curr: s => s.data.chapterLessons[s.data.currLesson]

  #     checkDisabled: >-
  #       s => {
  #         if (s.data.currLesson === 0) {
  #            s.el.previousButton.setAttribute( 'disabled', 'disabled' );
  #         } else {
  #            s.el.previousButton.removeAttribute( 'disabled' );
  #         }
  #         if (s.data.currLesson === (s.datalessonCount-1)) {
  #            s.el.nextButton.setAttribute( 'disabled', 'disabled' );
  #         } else {
  #            s.el.nextButton.removeAttribute( 'disabled' );
  #         }
  #       }

  #     incOrDecLesson: >-
  #       (s,doInc) => {
  #          let pos = s.data.currLesson;
  #          doInc ? pos++ : pos--;
  #          s.data.currLesson = pos;
  #          s.el.previousButton.disabled = false;
  #          s.el.nextButton.disabled = false;
  #          s.fun.checkDisabled();
  #       }
  #     setLessons: >-
  #       (s,lessons) => {
  #         s.data.currLesson = 0;
  #         s.data.chapterLessons = lessons;
  #         s.data.lessonCount = lessons.length;
  #         s.fun.checkDisabled();
  #       }

  #   onLoad: s => s.fun.checkDisabled()

  #   contents:
  #     - div:
  #         - div:
  #             - button:
  #                 handle: previousButton
  #                 textContent: previous
  #                 on_click: s => s.fun.incOrDecLesson()
  #             - span:
  #                 beep: bap
  #                 textContent: s => `showing ${1 + s.data.currLesson} of ${s.data.lessonCount}`
  #             - button:
  #                 handle: nextButton
  #                 textContent: next
  #                 on:
  #                 on_click: s => s.fun.incOrDecLesson(true)
  #         - section:
  #             contents:
  #               - h2: s => s.data.curr.title
  #               - p: s => s.data.curr.about
  #               - a:
  #                   href: s => s.data.curr.link
  #                   textContent: s => s.data.curr.link
  #               - div:
  #                   foreach: s => s.data.curr.files || []
  #                   forvar: sampleFile
  #                   contents:
  #                     - p: s => s.it.sampleFile.file
  #                     - pre: s => s.it.sampleFile.code
